{"version":3,"file":"static/js/413.5c4d7abe.chunk.js","mappings":"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","sources":["viewers/biome_multi_noise/PerlinSamplers.js","utils/hash.js","viewers/biome_multi_noise/MultiNoiseDimension.js","components/dimension/MultiNoiseBiomeSource.jsx","ui/NumberList.jsx","components/dimension/BiomeSource.jsx","components/dimension/FlatChunkSettings.jsx","components/dimension/DimensionGenerator.jsx","components/dimension/Dimension.jsx"],"sourcesContent":["import { INT_MAX_VALUE, INT_MIN_VALUE, grad, lerp3, perlinFade } from '../../utils/math';\n\nimport Random from 'java-random';\n\nexport class DoublePerlinSampler {\n    /**\n     * @param {JavaRandom} random \n     * @param {{ firstOctave: number, amplitudes: number[] }} settings \n     */\n    constructor(random, settings) {\n        this.firstSampler = new OctaveSimplexNoise(random, settings);\n        this.secondSampler = new OctaveSimplexNoise(random, settings);\n        this.amplitude = this.createAmplitude(settings.amplitudes);\n    }\n\n    /**\n     * @param {number[]} amplitudes \n     * @returns {number}\n     */\n    createAmplitude(amplitudes) {\n        let a = INT_MAX_VALUE;\n        let b = INT_MIN_VALUE;\n        amplitudes.forEach((n, index) => {\n            if (n !== 0) {\n                a = Math.min(a, index);\n                b = Math.max(b, index);\n            }\n        });\n        return (1/6) / (0.1 * (1.0 + 1.0 / (b - a + 1)));\n    }\n\n    /**\n     * @param {number} x \n     * @param {number} y \n     * @param {number} z \n     */\n    sample(x, y, z) {\n        const d = x * 1.0181268882175227;\n        const e = y * 1.0181268882175227;\n        const f = z * 1.0181268882175227;\n        return (this.firstSampler.sample(x, y, z) + this.secondSampler.sample(d, e, f)) * this.amplitude;\n    }\n}\n\nclass OctaveSimplexNoise {\n\n    /**\n     * @param {Random} random \n     * @param {number[]} octaves \n     */\n    constructor(random, { firstOctave, amplitudes }) {\n        this.amplitudes = amplitudes;\n        const sampler = new PerlinNoiseSampler(random);\n        const j = amplitudes.length;\n        const k = -firstOctave;\n        this.octaveSamplers = new Array(j);\n\n        if (k >= 0 && k < j) {\n            const d = amplitudes[k];\n            if (d !== 0.0) {\n                this.octaveSamplers[k] = sampler;\n            }\n        }\n\n        for (let l = k - 1; l >= 0; --l) {\n            if (l < j) {\n                if (this.amplitudes[l] !== 0.0) {\n                    this.octaveSamplers[l] = new PerlinNoiseSampler(random);\n                } else {\n                    consumeRandom(random, 262);\n                }\n            } else {\n                consumeRandom(random, 262);\n            }\n        }\n\n        if (k < j - 1) {\n            const m = sampler.sample(0.0, 0.0, 0.0, 0.0, 0.0) * 9.223372036854776E18;\n            const random2 = new Random(m);\n\n            for (let n = k + 1; n < j; ++n) {\n                if (n >= 0) {\n                    if (this.amplitudes[n] !== 0.0) {\n                        this.octaveSamplers[n] = new PerlinNoiseSampler(random2);\n                    } else {\n                        consumeRandom(random, 262);\n                    }\n                } else {\n                    consumeRandom(random, 262);\n                }\n            }\n        }\n\n        this.lacunarity = Math.pow(2.0, -k);\n        this.persistence = Math.pow(2.0, j - 1) / (Math.pow(2.0, j) - 1.0);\n    }\n\n    /**\n     * @param {number} x \n     * @param {number} y \n     * @param {number} z \n     * @param {number} d \n     * @param {number} e \n     * @param {boolean} bl \n     */\n    sample(x, y, z, d = 0.0, e = 0.0, bl = false) {\n        let noise = 0.0;\n        let lacunarity = this.lacunarity;\n        let persistence = this.persistence;\n\n        this.octaveSamplers.forEach((sampler, i) => {\n            if (typeof sampler === 'object') {\n                noise += this.amplitudes[i] * sampler.sample(\n                    x * lacunarity, bl ? -sampler.originY : y * lacunarity,\n                    z * lacunarity,\n                    d * lacunarity, e * lacunarity) * persistence;\n                lacunarity *= 2.0;\n                persistence /= 2.0;\n            }\n        });\n        return noise;\n    }\n}\n\nclass PerlinNoiseSampler {\n\n    /**\n     * @param {Random} random \n     */\n    constructor(random) {\n        this.originX = random.nextDouble() * 256;\n        this.originY = random.nextDouble() * 256;\n        this.originZ = random.nextDouble() * 256;\n        this.permutations = this.buildPermutationsTable(random);\n    }\n\n    /**\n     * @param {Random} random \n     */\n    buildPermutationsTable(random) {\n        const permutations = new Uint8Array(256);\n        for (let j = 0; j < 256; ++j) {\n            permutations[j] = j;\n        }\n        for (let j = 0; j < 256; ++j) {\n            const k = random.nextInt(256 - j);\n            const b = permutations[j];\n            permutations[j] = permutations[j + k];\n            permutations[j + k] = b;\n        }\n        return permutations;\n    }\n\n    /**\n     * @param {number} x \n     * @param {number} y \n     * @param {number} z \n     * @param {number} d \n     * @param {number} e \n     * @returns {number}\n     */\n    sample(x, y, z, d, e) {\n        const rx = x + this.originX;\n        const ry = y + this.originY;\n        const rz = z + this.originZ;\n        const fx = Math.floor(rx);\n        const fy = Math.floor(ry);\n        const fz = Math.floor(rz);\n\n        const dx = rx - fx;\n        const dy = ry - fy;\n        const dz = rz - fz;\n        const fadeX = perlinFade(dx);\n        const fadeY = perlinFade(dy);\n        const fadeZ = perlinFade(dz);\n\n        const t = d === 0 ? 0 : Math.floor(Math.min(e, dy) / d) * d;\n        return this._sample(fx, fy, fz, dx, dy - t, dz, fadeX, fadeY, fadeZ);\n    }\n\n    /**\n     * @param {number} sectionX \n     * @param {number} sectionY \n     * @param {number} sectionZ \n     * @param {number} localX \n     * @param {number} localY \n     * @param {number} localZ \n     * @param {number} fadeLocalX \n     * @param {number} fadeLocalY \n     * @param {number} fadeLocalZ \n     * @returns {number}\n     */\n    _sample(sectionX, sectionY, sectionZ, localX, localY, localZ, fadeLocalX, fadeLocalY, fadeLocalZ) {\n        const i = this.getGradient(sectionX) + sectionY;\n        const j = this.getGradient(i) + sectionZ;\n        const k = this.getGradient(i + 1) + sectionZ;\n        const l = this.getGradient(sectionX + 1) + sectionY;\n        const m = this.getGradient(l) + sectionZ;\n        const n = this.getGradient(l + 1) + sectionZ;\n        const d = grad(this.getGradient(j), localX, localY, localZ);\n        const e = grad(this.getGradient(m), localX - 1.0, localY, localZ);\n        const f = grad(this.getGradient(k), localX, localY - 1.0, localZ);\n        const g = grad(this.getGradient(n), localX - 1.0, localY - 1.0, localZ);\n        const h = grad(this.getGradient(j + 1), localX, localY, localZ - 1.0);\n        const o = grad(this.getGradient(m + 1), localX - 1.0, localY, localZ - 1.0);\n        const p = grad(this.getGradient(k + 1), localX, localY - 1.0, localZ - 1.0);\n        const q = grad(this.getGradient(n + 1), localX - 1.0, localY - 1.0, localZ - 1.0);\n        return lerp3(fadeLocalX, fadeLocalY, fadeLocalZ, d, e, f, g, h, o, p, q);\n    }\n\n    getGradient(hash) {\n        return this.permutations[hash & 255];\n    }\n}\n\n/**\n * @param {Random} random \n * @param {number} count\n */\nfunction consumeRandom(random, count) {\n    for (let c = 0; c < count; c++) {\n        random.nextInt();\n    }\n}\n","export function hashCode(s) {\n    let hash;\n    for (let i = 0; i < s.length; i++) { \n        hash = Math.imul(31, hash) + s.charCodeAt(i) | 0;\n    }\n    return hash;\n}","import { DoublePerlinSampler } from './PerlinSamplers';\nimport { hashCode } from '../../utils/hash';\nimport Random from 'java-random';\n\n/**\n * @typedef Biome\n * @type {object}\n * @property {string} biome Biome name \n * @property {{\n        temperature: number,\n        humidity: number,\n        altitude: number,\n        weirdness: number,\n        offset: number\n    }} parameters Noise point parameters\n */\n\nexport class MultiNoiseDimension {\n\n    /**\n     * @param {{\n            temperature_noise: { firstOctave: number, amplitudes: number[] },\n            humidity_noise: { firstOctave: number, amplitudes: number[] },\n            altitude_noise: { firstOctave: number, amplitudes: number[] },\n            weirdness_noise: { firstOctave: number, amplitudes: number[] },\n            seed: number,\n            biomes: Biome[]\n        }} source\n    */\n    constructor(source) {\n        this.biomes = source.biomes;\n\n        this.temperatureNoise = new DoublePerlinSampler(new Random(source.seed), source.temperature_noise);\n        this.humidityNoise = new DoublePerlinSampler(new Random(source.seed + 1), source.humidity_noise);\n        this.altitudeNoise = new DoublePerlinSampler(new Random(source.seed + 2), source.altitude_noise);\n        this.weirdnessNoise = new DoublePerlinSampler(new Random(source.seed + 3), source.weirdness_noise);\n    }\n\n    /**\n     * Get biome for the given block position.\n     * \n     * @param {number} x \n     * @param {number} y \n     * @param {number} z \n     * @returns {Biome}\n     */\n    getBiomeAt(x, y, z) {\n        const biomeX = x >> 2;\n        const biomeY = y >> 2;\n        const biomeZ = z >> 2;\n\n        // Calculate a noise point using perlin noise samplers\n        const temperature = this.temperatureNoise.sample(biomeX, biomeY, biomeZ);\n        const humidity = this.humidityNoise.sample(biomeX, biomeY, biomeZ);\n        const altitude = this.altitudeNoise.sample(biomeX, biomeY, biomeZ);\n        const weirdness = this.weirdnessNoise.sample(biomeX, biomeY, biomeZ);\n\n        // Determine the biome with the parameters closest to the current noise point\n        let current = null;\n        let minDistance = Number.MAX_SAFE_INTEGER;\n        for (const biome of this.biomes) {\n            const distance = this.getDistanceToBiome(temperature, humidity, altitude, weirdness, biome.parameters);\n            if (distance < minDistance) {\n                current = biome;\n                minDistance = distance;\n            }\n        }\n        \n        return current;\n    }\n\n    /**\n     * Fill the image data with biome positions\n     * \n     * @param {ImageData} image \n     * @param {number} [scale] exponential\n     * @param {number} [every] x % every === 0 ? compute : use previous data\n     * @param {number} [offsetX] \n     * @param {number} [offsetY] \n     */\n    createImageData(image, scale = 4, every = 2, offsetX = 0, offsetY = 0) {\n        const width = image.width;\n        const height = image.height;\n        const buffer = new ArrayBuffer(image.data.length);\n        const buf8 = new Uint8ClampedArray(buffer);\n        const data32 = new Uint32Array(buffer);\n\n        const endX = offsetX + width;\n        const endY = offsetY + height;\n\n        const biomesColors = MultiNoiseDimension.getBiomesColors(this.biomes);\n\n        let color = null;\n        for (let x = offsetX; x < endX; x += 1) {\n            for (let y = offsetY; y < endY; y += 1) {\n                if (x % every === 0) {\n                    if (y % every === 0) {\n                        const biome = this.getBiomeAt(x << scale, 0, y << scale);\n                        color = biomesColors[biome.biome];\n                    }\n                    data32[y * width + x] = (255 << 24) | color;\n                } else {\n                    data32[y * width + x] = data32[y * width + x - 1];\n                }\n            }\n        }\n        image.data.set(buf8);\n    }\n\n    /**\n     * Calculates the distance from this noise point to another one.\n     * \n     * @param {number} temperature \n     * @param {number} humidity \n     * @param {number} altitude \n     * @param {number} weirdness \n     * @param {{ temperature: number, humidity: number, altitude: number, weirdness: number, offset: number }} parameters \n     */\n    getDistanceToBiome(temperature, humidity, altitude, weirdness, parameters) {\n        return (temperature - parameters.temperature) ** 2\n            + (humidity - parameters.humidity) ** 2\n            + (altitude - parameters.altitude) ** 2\n            + (weirdness - parameters.weirdness) ** 2\n            + (0 - parameters.offset) ** 2;\n    }\n\n    /**\n     * @param {Biome[]} biomes \n     * @returns {object}\n     */\n    static getBiomesColors(biomes = []) {\n        const biomesColors = {};\n        for (const biome of biomes) {\n            biomesColors[biome.biome] = hashCode(biome.biome);\n        }\n        return biomesColors;\n    }\n}\n","import React, { useCallback, useEffect, useRef, useState } from 'react';\n\nimport { Button } from '../../ui/Button';\nimport { MultiNoiseDimension } from '../../viewers/biome_multi_noise/MultiNoiseDimension';\nimport { integerColorToHex } from '../../utils/color';\nimport { useToggle } from '../../hooks/ui';\n\nexport const MultiNoiseRepresentation = React.memo(function ({ source }) {\n\n    const [auto, toggle] = useToggle();\n    const [scale, setScale] = useState(4);\n    const reference = useRef(null);\n\n    const render = useCallback(function () {\n        if ((source.biomes || []).length < 1) {\n            return;\n        }\n        const canvas = reference.current;\n        const ctx = canvas.getContext('2d', { alpha: false });\n        const img = ctx.createImageData(canvas.width, canvas.height);\n        const dimension = new MultiNoiseDimension(source);\n        dimension.createImageData(img, scale);\n        ctx.putImageData(img, 0, 0);\n    }, [scale, source]);\n\n    const handleClick = useCallback(function (e) {\n        e.preventDefault();\n        render();\n    }, [render]);\n\n    const handleScaleChange = useCallback(function (e) {\n        setScale(parseInt(e.target.value));\n    }, []);\n\n    useEffect(function () {\n        if (auto) {\n            render();\n        }\n    }, [auto, render]);\n\n    return <fieldset>\n        <legend>Preview</legend>\n        <div className=\"form-row\">\n            <div style={{ display: 'flex', alignItems: 'center' }}>\n                <canvas height=\"128\" width=\"384\" ref={reference} moz-opaque=\"true\"></canvas>\n            </div>\n            <div>\n                <label htmlFor=\"scale\">Scale</label> : <input type=\"range\" id=\"scale\" min=\"1\" max=\"8\" value={scale} onChange={handleScaleChange} /> ({1 << scale} block/px)<br />\n                <label htmlFor=\"auto-update\">Auto update (affects performance)</label> : <input type=\"checkbox\" className=\"checkbox\" checked={auto} onChange={toggle} id=\"auto-update\" /><br />\n                {(source.biomes || []).length > 0 && !auto && <Button onClick={handleClick}>Render</Button>}\n            </div>\n        </div>\n        <ul className=\"form-group form-row\" style={{ justifyContent: 'start' }}>\n            {Object.entries(MultiNoiseDimension.getBiomesColors(source.biomes)).map(([biome, color]) => {\n                const b = (color >> 16) & 0xFF;\n                const g = (color >> 8) & 0xFF;\n                const r = color & 0xFF;\n                return <li key={biome} style={{ display: 'inline', marginLeft: '8px', marginRight: '4px' }}>\n                    <div style={{\n                        backgroundColor: integerColorToHex(((r << 16) | (g << 8) | b)),\n                        width: '32px', height: '16px',\n                        display: 'inline-block',\n                        marginRight: '0.5rem',\n                        verticalAlign: 'middle'\n                    }}></div>\n                    {biome}\n                </li>\n            })}\n        </ul>\n    </fieldset>\n});\n","import { NumberInput } from './Input';\nimport React from 'react';\n\nexport const NumberList = React.memo(function ({ children, numbers = [], onChange, step }) {\n\n    const handleChange = function(val, pos) {\n        onChange(numbers.map((n, i) => i === pos ? val : n));\n    };\n\n    return <div className=\"form-row\">\n        <label>{children}</label>&nbsp;:&nbsp;{numbers.map((n, i) => <NumberInput key={i} step={step} value={n} onChange={(n) => handleChange(n, i)} />)}\n    </div>\n});\n","import { ConfInput, NumberInput } from '../../ui/Input';\nimport { MULTI_NOISE_BIOME_SOURCE, NOISES_NAMES } from './DimensionDefaults';\nimport { capitalize, hasDuplicatedObjects } from '../../utils/data';\nimport React, { useCallback, useContext, useEffect } from 'react';\n\nimport { Button } from '../../ui/Button';\nimport { DataContext } from '../../context/DataContext';\nimport { MultiNoiseRepresentation } from './MultiNoiseBiomeSource';\nimport { NumberList } from '../../ui/NumberList';\nimport { SeedField } from './DimensionGenerator';\nimport { useCrudPreset } from '../../hooks/form';\nimport { useKeyedListOptions } from '../../hooks/context';\nimport { useMemo } from 'react';\nimport { useToggle } from '../../hooks/ui';\nimport Select from '../../ui/Select';\n\nexport const BiomeSource = React.memo(function({source = { type: 'minecraft:fixed' }, onChange}) {\n\n    const options = useMemo(function() {\n        return [\n            { value: 'minecraft:checkerboard', label: 'Checkerboard' },\n            { value: 'minecraft:fixed', label: 'Fixed' },\n            { value: 'minecraft:multi_noise', label: 'Multi noise' },\n            { value: 'minecraft:the_end', label: 'The end' },\n            { value: 'minecraft:vanilla_layered', label: 'Vanilla layered' }\n        ];\n    }, []);\n\n    const handleChange = useCallback(function(settings) {\n        onChange(({ ...source, ...settings }));\n    }, [onChange, source]);\n    const handleSeedChange = useCallback(function(seed) {\n        onChange(({ ...source, seed }));\n    }, [onChange, source]);\n    const handleTypeChange = useCallback(function(option) {\n        onChange(({ seed: source.seed, type: option.value }));\n    }, [onChange, source.seed]);\n    const handleFixedSourceChange = useCallback(function(biome) {\n        onChange(({ ...source, biome }));\n    }, [onChange, source]);\n\n    const selected = useMemo(function() {\n        return options.find(o => o.value === source.type);\n    }, [options, source.type]);\n\n    return <fieldset>\n        <legend>Biome source</legend>\n        <div className=\"form-group\">\n            <label htmlFor=\"biome-source-type\">Type</label><Select inputId=\"biome-source-type\" options={options} value={selected} onChange={handleTypeChange} />\n        </div>\n        <SeedField value={source.seed} onChange={handleSeedChange} />\n        <hr />\n        {source.type === 'minecraft:checkerboard' && <CheckerboardBiomeSource source={source} onChange={handleChange} />}\n        {source.type === 'minecraft:fixed' && <FixedBiomeSource biome={source.biome} onChange={handleFixedSourceChange} />}\n        {source.type === 'minecraft:multi_noise' && <MultiNoiseBiomeSource source={source} onChange={handleChange} />}\n        {source.type === 'minecraft:vanilla_layered' && <VanillaLayeredBiomeSource source={source} onChange={handleChange} />}\n    </fieldset>\n});\n\nconst CheckerboardBiomeSource = React.memo(function({source, onChange}) {\n    const options = useKeyedListOptions('biomes');\n    const handleBiomesChange = useCallback(function(selection) {\n        onChange({ ...source, biomes: selection === null ? [] : selection.map(o => o.value) });\n    }, [onChange, source]);\n    const handleScaleChange = useCallback(function(scale) {\n        onChange({ ...source, scale });\n    }, [onChange, source]);\n\n    const biomes = useMemo(() => source.biomes || (options.length > 0 ? [options[0].value] : []), [options, source.biomes]);\n    useEffect(() => {\n        if (!Array.isArray(source.biomes)) {\n            onChange({ biomes, scale: source.scale || 2 });\n        }\n    }, [biomes, source.biomes, source.scale, onChange]);\n\n    return <div className=\"form-group\">\n        <div className=\"form-group\">\n            <label htmlFor=\"biomes\">Biomes</label><Select options={options} isMulti isClearable={false} value={options.filter(o => biomes.includes(o.value))} onChange={handleBiomesChange} id=\"biomes\" />\n        </div>\n        <div className=\"form-group\">\n            <NumberInput id=\"scale\" value={source.scale} onChange={handleScaleChange} max={62} required={false} defaultValue={2}>Scale (squares of 2<sup>scale</sup> chunks)</NumberInput>\n        </div>\n        {biomes.length < 1 && <p className=\"alert--warning\">Warning: a dimension must contain at least one biome!</p>}\n    </div>;\n});\n\nexport const FixedBiomeSource = React.memo(function({biome = 'minecraft:plains', inline = false, onChange}) {\n    const options = useKeyedListOptions('biomes');\n    const handleBiomesChange = useCallback(function(option) {\n        onChange(option.value);\n    }, [onChange]);\n\n    return <div className={inline ? 'form-row flex-grow' : 'form-group'}>\n        <label htmlFor=\"fixed-biome\">Biome{inline && ' :'}&nbsp;</label><div className={inline ? 'flex-grow' : undefined}><Select options={options} value={options.find(o => o.value === biome)} onChange={handleBiomesChange} /></div>\n    </div>;\n});\n\nconst MultiNoiseBiomeSource = React.memo(function({source = MULTI_NOISE_BIOME_SOURCE, onChange}) {\n    const options = useKeyedListOptions('biomes');\n    const [biomes, handleAdd, handleChange, handleRemove] = useCrudPreset(biomes => onChange({ ...source, biomes }), source.biomes, { biome: 'minecraft:plains', parameters: {\n        altitude: 0,\n        weirdness: 0,\n        offset: 0,\n        temperature: 0.8,\n        humidity: 0.4\n    } });\n\n    const [advanced, toggleAdvanced] = useToggle();\n    const handleNoiseChange = useCallback(function(type, noise) {\n        onChange(({ ...source, [type]: noise }));\n    }, [source, onChange]);\n\n    const vanilla = useContext(DataContext).vanilla.biomes;\n    const custom = useContext(DataContext).custom.biomes;\n    const namespace = useContext(DataContext).namespace;\n    useEffect(function() {\n        for (const noise of NOISES_NAMES) {\n            if (typeof source[noise] === 'undefined') {\n                onChange({ ...MULTI_NOISE_BIOME_SOURCE, ...source, biomes });\n                return;\n            }\n        }\n    }, [biomes, onChange, source]);\n\n    const values = [];\n    biomes.forEach((entry, i) => {\n        values.push(<BiomeSelection namespace={namespace} vanilla={vanilla} custom={custom} biomesOptions={options} entry={entry} key={i} onChange={handleChange}><Button cat=\"danger\" onClick={e => handleRemove(e, i)}>Delete</Button></BiomeSelection>);\n    });\n    return <>\n        <div className=\"flex-container\" style={{ alignItems: 'baseline' }}>\n            <h4>\n                Biomes list\n                <Button onClick={handleAdd} cat=\"primary mls\">Add biome</Button>\n                <Button onClick={toggleAdvanced} cat=\"secondary\">Advanced</Button>\n            </h4>\n        </div>\n        {advanced && <div className=\"grid-2-small-1 has-gutter mbm\">\n            {NOISES_NAMES\n                .map(noise => <PerlinNoiseParameters\n                    key={noise}\n                    noise={source[noise] || MULTI_NOISE_BIOME_SOURCE[noise]}\n                    onChange={(n) => handleNoiseChange(noise, n)}>{capitalize(noise.replace('_', ' '))}</PerlinNoiseParameters>)}\n        </div>}\n        {values}\n        {hasDuplicatedObjects(biomes.map(biome => biome.parameters)) && <p className=\"alert--warning\">Warning: every biome must have a unique combination of parameters!</p>}\n        <MultiNoiseRepresentation source={source} />\n    </>;\n});\n\nconst VanillaLayeredBiomeSource = React.memo(function({source, onChange}) {\n    const handleLegacyBiomeToggle = useCallback(function(e) {\n        onChange({ ...source, legacy_biome_init_layer: e.target.checked });\n    }, [onChange, source]);\n    const handleLargeBiomesToggle = useCallback(function(e) {\n        onChange({ ...source, large_biomes: e.target.checked });\n    }, [onChange, source]);\n\n    return <div className=\"form-row\">\n        <ConfInput checked={source.legacy_biome_init_layer || false} onChange={handleLegacyBiomeToggle}>Legacy biome init layer</ConfInput>\n        <ConfInput checked={source.large_biomes || false} onChange={handleLargeBiomesToggle}>Large biomes</ConfInput>\n    </div>;\n});\n\nconst PerlinNoiseParameters = React.memo(function({children, noise = { firstOctave: -7, amplitudes: [1, 1] }, onChange}) {\n\n    const handleFirstOctaveChange = useCallback(function(firstOctave) {\n        onChange({ ...noise, firstOctave });\n    }, [noise, onChange]);\n    const handleAmplitudesChange = useCallback(function(amplitudes) {\n        onChange({ ...noise, amplitudes });\n    }, [noise, onChange]);\n\n    return <fieldset style={{ margin: 0 }}>\n        <legend>{children}</legend>\n        <div className=\"form-group form-row\">\n            <NumberInput id=\"firstOctave\" value={noise.firstOctave} onChange={handleFirstOctaveChange} min={-1000}>First octave</NumberInput>\n            <NumberList numbers={noise.amplitudes} step={0.1} onChange={handleAmplitudesChange}>Amplitudes</NumberList>\n        </div>\n    </fieldset>;\n});\n\nconst BiomeSelection = React.memo(function({namespace, vanilla, custom, biomesOptions, entry, onChange, children}) {\n    const handleBiomeChange = useCallback(function(option) {\n        const biome = option.value;\n        const data = (vanilla.find(b => 'minecraft:' + b.name === biome) || custom.find(b => namespace + ':' + b.key === biome) || { rainfall: 0, temperature: 0 });\n        const parameters = {\n            altitude: entry.parameters.altitude || 0,\n            weirdness: entry.parameters.weirdness || 0,\n            offset: entry.parameters.offset || 0,\n            temperature: data.temperature || 0.8,\n            humidity: data.rainfall || 0.4\n        };\n        onChange({ biome, parameters }, entry);\n    }, [entry, custom, namespace, onChange, vanilla]);\n\n    const handleParameterChange = useCallback(function(value) {\n        onChange({ biome: entry.biome, parameters: { ...entry.parameters, ...value } }, entry);\n    }, [entry, onChange]);\n\n    const selected = useMemo(function() {\n        return biomesOptions.find(o => o.value === entry.biome);\n    }, [biomesOptions, entry.biome]);\n    return <div className=\"form-group\">\n        <Select options={biomesOptions} value={selected} onChange={handleBiomeChange} />\n        <div className=\"form-group form-row\">\n            <NumberInput id=\"altitude\" value={entry.parameters.altitude} upChange={handleParameterChange} step=\"0.1\" min=\"-2\" max=\"2\">Altitude</NumberInput>\n            <NumberInput id=\"weirdness\" value={entry.parameters.weirdness} upChange={handleParameterChange} step=\"0.1\" min=\"-2\" max=\"2\">Weirdness</NumberInput>\n            <NumberInput id=\"offset\" value={entry.parameters.offset} upChange={handleParameterChange} step=\"0.1\" max=\"1\">Offset</NumberInput>\n            <NumberInput id=\"temperature\" value={entry.parameters.temperature} upChange={handleParameterChange} step=\"0.1\" min=\"-2\" max=\"2\">Temperature</NumberInput>\n            <NumberInput id=\"humidity\" value={entry.parameters.humidity} upChange={handleParameterChange} step=\"0.1\" min=\"-2\" max=\"2\">Humidity</NumberInput>\n            {children}\n        </div>\n    </div>\n});\n","import { ConfInput, NumberInput } from '../../ui/Input';\nimport { SortableContainer, SortableElement } from 'react-sortable-hoc';\nimport { useCrudPreset, useJsonEffect } from '../../hooks/form';\nimport React, { useCallback } from 'react';\n\nimport { BlockSelect } from '../state/BlockPredicate';\nimport { Button } from '../../ui/Button';\nimport { FixedBiomeSource } from './BiomeSource';\nimport { Structures } from '../noise/Structures';\n\nexport const FlatChunkSettings = React.memo(function ({ settings, onChange }) {\n\n    settings = useJsonEffect(settings || {\n        structures: {\n            structures: []\n        },\n        layers: [\n            { block: 'minecraft:bedrock', height: 1 },\n            { block: 'minecraft:sandstone', height: 70 }\n        ],\n        biome: 'minecraft:plains'\n    }, settings, onChange);\n\n    const handleBiomeChange = useCallback(function (biome) {\n        onChange({ ...settings, biome });\n    }, [settings, onChange]);\n    const handleLayersChange = useCallback(function (layers) {\n        onChange({ ...settings, layers });\n    }, [settings, onChange]);\n    const handleStructuresChange = useCallback(function (structures) {\n        onChange({ ...settings, structures });\n    }, [settings, onChange]);\n    const handleLakesToggle = useCallback(function (e) {\n        onChange({ ...settings, lakes: e.target.checked });\n    }, [settings, onChange]);\n\n    return <div className=\"form-group\">\n        <div className=\"form-group form-row\">\n            <FixedBiomeSource biome={settings.biome} inline={true} onChange={handleBiomeChange} />\n            <ConfInput className=\"mls\" checked={settings.lakes || false} onChange={handleLakesToggle}>Lakes</ConfInput>\n        </div>\n        <GeneratorLayers config={settings.layers} onChange={handleLayersChange} />\n        <Structures data={settings.structures} onChange={handleStructuresChange} />\n    </div>\n});\n\nconst GeneratorLayers = React.memo(function ({ config, onChange }) {\n    const [layers, handleAdd, handleChange, handleRemove] = useCrudPreset(onChange, config, { block: 'minecraft:grass_block', height: 1 });\n\n    const shouldCancelStart = useCallback(function (e) {\n        return !e.target.parentNode.classList.contains('sortable-item');\n    }, []);\n\n    const handleReversedSort = useCallback(function ({ oldIndex, newIndex }) {\n        handleChange({ oldIndex: layers.length - 1 - oldIndex, newIndex: layers.length - 1 - newIndex });\n    }, [layers, handleChange]);\n\n    return <fieldset>\n        <legend>Layers <Button onClick={handleAdd}>Add layer</Button></legend>\n        <SortableLayersList layers={layers} onChange={handleChange} onRemove={handleRemove} onSortEnd={handleReversedSort} shouldCancelStart={shouldCancelStart} />\n    </fieldset>\n});\n\nconst SortableLayersList = SortableContainer(React.memo(function ({ layers, onChange, onRemove }) {\n    let key = 0;\n    return <ol className=\"sortable-container\">\n        {layers.map((layer, index) => {\n            key += layer.height + 1;\n            return <Layer i={index} index={layers.length - 1 - index} key={key} layer={layer} onChange={onChange} onRemove={onRemove} />\n        }).reverse()}\n    </ol>\n}));\n\nconst Layer = SortableElement(React.memo(function ({ i, layer, onChange, onRemove }) {\n    const handleHeightChange = useCallback(function (height, layer) {\n        onChange({ ...layer, height }, layer);\n    }, [onChange]);\n    const handleBlockChange = useCallback(function (block, layer) {\n        onChange({ ...layer, block }, layer);\n    }, [onChange]);\n\n    return <div className=\"sortable-item\"><div className=\"form-group form-row\">\n        <div className=\"flex-grow\"><BlockSelect block={layer.block} onChange={option => handleBlockChange(option.value, layer)} /></div>\n        <NumberInput id=\"height\" className=\"mls\" value={layer.height} max={256} onChange={height => handleHeightChange(height, layer)}>Height</NumberInput>\n        <Button cat=\"danger mlm\" onClick={e => onRemove(e, i)}>Remove</Button>\n    </div></div>\n}));\n","import { CHUNK_GENERATOR_TYPES, DIMENSION } from './DimensionDefaults';\nimport React, { useCallback, useEffect, useState } from 'react';\n\nimport { BiomeSource } from './BiomeSource';\nimport { ConfInput } from '../../ui/Input';\nimport { FlatChunkSettings } from './FlatChunkSettings';\nimport { NoiseGenerator } from '../noise/NoiseSettings';\nimport { hashCode } from './../../utils/hash';\nimport Select from '../../ui/Select';\n\nexport function DimensionGenerator({generator, onChange}) {\n\n    const [previousGenerator, setPreviousGenerator] = useState({ type: null });\n\n    const handleChunkGeneratorChange = useCallback(function(option) {\n        if (option.value === previousGenerator.type) {\n            onChange(previousGenerator);\n        } else if (option.value === 'minecraft:noise') {\n            onChange(DIMENSION.generator);\n        } else {\n            onChange({ type: option.value });\n        }\n        setPreviousGenerator(generator);\n    }, [generator, previousGenerator, onChange]);\n\n    const handleSeedChange = useCallback(function(seed) {\n        onChange({ ...generator, seed });\n    }, [generator, onChange]);\n    const handleSettingsChange = useCallback(function(settings) {\n        onChange({ ...generator, settings });\n    }, [generator, onChange]);\n    const handleBiomeSourceChange = useCallback(function(biome_source) {\n        onChange({ ...generator, biome_source });\n    }, [generator, onChange]);\n\n    return <fieldset>\n        <legend style={{ fontWeight: 'normal', width: '28ch', fontSize: '1.05rem' }}><Select options={CHUNK_GENERATOR_TYPES} value={CHUNK_GENERATOR_TYPES.find(o => generator.type === o.value)} onChange={handleChunkGeneratorChange} /></legend>\n        <div className=\"form-group\">\n            {generator.type === 'minecraft:noise' && <>\n                <SeedField value={generator.seed} onChange={handleSeedChange} />\n                <NoiseGenerator settings={generator.settings} onChange={handleSettingsChange} />\n                <BiomeSource source={generator.biome_source} onChange={handleBiomeSourceChange} />\n            </>}\n            {generator.type === 'minecraft:flat' &&\n                <FlatChunkSettings settings={generator.settings} onChange={handleSettingsChange} />\n            }\n        </div>\n    </fieldset>;\n}\n\nexport const SeedField = React.memo(function({onChange, value}) {\n    const [text, setText] = useState(value || 286956243);\n\n    const handleChange = useCallback(function(e) {\n        const value = e.target.value;\n        setText(value);\n        onChange(isNaN(value) ? hashCode(value) : parseInt(value));\n    }, [onChange]);\n\n    useEffect(() => {\n        if (typeof value !== 'number') {\n            onChange(286956243);\n        }\n    }, [onChange, value]);\n\n    return <div className=\"form-group\">\n        <ConfInput type=\"text\" id=\"seed\" value={text} onChange={handleChange}>Seed</ConfInput>\n    </div>\n});\n","import React, { useCallback, useState } from 'react';\n\nimport { Button } from '../../ui/Button';\nimport { DIMENSION } from './DimensionDefaults';\nimport { DimensionGenerator } from './DimensionGenerator';\nimport { DimensionType } from './DimensionType';\nimport { JsonViewer } from '../../ui/JsonViewer';\nimport { NamespacedKey } from '../NamespacedKey';\n\nexport function Dimension({data = DIMENSION, onSave}) {\n\n    const [state, setState] = useState(data);\n\n    const handleTypeChange = useCallback(function(type) {\n        setState(state => ({ ...state, type }));\n    }, []);\n    const handleGeneratorChange = useCallback(function(generator) {\n        setState(state => ({ ...state, generator }));\n    }, []);\n\n    const handleVanillaSelect = function(dimension) {\n        if (state.generator.type === 'minecraft:noise') {\n            dimension.generator.seed = state.generator.seed;\n            dimension.generator.biome_source.seed = state.generator.biome_source.seed;\n        } else {\n            dimension.generator.seed = 286956243;\n            dimension.generator.biome_source.seed = 286956243;\n        }\n        setState(dimension);\n    };\n\n    const handleSubmit = useCallback(function(e) {\n        e.preventDefault();\n        onSave({\n            ...state,\n            ...Object.fromEntries(new FormData(e.target))\n        });\n    }, [onSave, state])\n\n    return <form onSubmit={handleSubmit}>\n        <NamespacedKey example=\"blue_dimension\" type=\"dimensions\" value={data.key} onSelectLoad={handleVanillaSelect}>\n            dimension\n            <JsonViewer data={state} />\n        </NamespacedKey>\n        <DimensionType type={state.type} onChange={handleTypeChange} />\n        <DimensionGenerator generator={state.generator} onChange={handleGeneratorChange} />\n        <Button type=\"submit\">Save</Button>\n    </form>\n}\n\nexport default Dimension;\n"],"names":["DoublePerlinSampler","random","settings","this","firstSampler","OctaveSimplexNoise","secondSampler","amplitude","createAmplitude","amplitudes","a","INT_MAX_VALUE","b","INT_MIN_VALUE","forEach","n","index","Math","min","max","x","y","z","d","e","f","sample","firstOctave","sampler","PerlinNoiseSampler","j","length","k","octaveSamplers","Array","l","consumeRandom","m","random2","Random","lacunarity","pow","persistence","bl","noise","i","originY","originX","nextDouble","originZ","permutations","buildPermutationsTable","Uint8Array","nextInt","rx","ry","rz","fx","floor","fy","fz","dx","dy","dz","fadeX","perlinFade","fadeY","fadeZ","t","_sample","sectionX","sectionY","sectionZ","localX","localY","localZ","fadeLocalX","fadeLocalY","fadeLocalZ","getGradient","grad","g","h","o","p","q","lerp3","hash","count","c","hashCode","s","imul","charCodeAt","MultiNoiseDimension","source","biomes","temperatureNoise","seed","temperature_noise","humidityNoise","humidity_noise","altitudeNoise","altitude_noise","weirdnessNoise","weirdness_noise","biomeX","biomeY","biomeZ","temperature","humidity","altitude","weirdness","current","minDistance","Number","MAX_SAFE_INTEGER","biome","distance","getDistanceToBiome","parameters","image","scale","every","offsetX","offsetY","width","height","buffer","ArrayBuffer","data","buf8","Uint8ClampedArray","data32","Uint32Array","endX","endY","biomesColors","getBiomesColors","color","getBiomeAt","set","offset","MultiNoiseRepresentation","React","useToggle","auto","toggle","useState","setScale","reference","useRef","render","useCallback","canvas","ctx","getContext","alpha","img","createImageData","putImageData","handleClick","preventDefault","handleScaleChange","parseInt","target","value","useEffect","className","style","display","alignItems","ref","htmlFor","type","id","onChange","checked","Button","onClick","justifyContent","Object","entries","map","r","marginLeft","marginRight","backgroundColor","integerColorToHex","verticalAlign","NumberList","children","numbers","step","handleChange","val","pos","BiomeSource","options","useMemo","label","handleSeedChange","handleTypeChange","option","handleFixedSourceChange","selected","find","Select","inputId","SeedField","CheckerboardBiomeSource","FixedBiomeSource","MultiNoiseBiomeSource","VanillaLayeredBiomeSource","useKeyedListOptions","handleBiomesChange","selection","isArray","isMulti","isClearable","filter","includes","required","defaultValue","inline","undefined","MULTI_NOISE_BIOME_SOURCE","useCrudPreset","handleAdd","handleRemove","advanced","toggleAdvanced","handleNoiseChange","vanilla","useContext","DataContext","custom","namespace","NOISES_NAMES","values","entry","push","BiomeSelection","biomesOptions","cat","PerlinNoiseParameters","capitalize","replace","hasDuplicatedObjects","handleLegacyBiomeToggle","legacy_biome_init_layer","handleLargeBiomesToggle","large_biomes","handleFirstOctaveChange","handleAmplitudesChange","margin","handleBiomeChange","name","key","rainfall","handleParameterChange","upChange","FlatChunkSettings","useJsonEffect","structures","layers","block","handleLayersChange","handleStructuresChange","handleLakesToggle","lakes","GeneratorLayers","config","Structures","shouldCancelStart","parentNode","classList","contains","handleReversedSort","oldIndex","newIndex","SortableLayersList","onRemove","onSortEnd","SortableContainer","layer","Layer","reverse","SortableElement","handleHeightChange","handleBlockChange","DimensionGenerator","generator","previousGenerator","setPreviousGenerator","handleChunkGeneratorChange","DIMENSION","handleSettingsChange","handleBiomeSourceChange","biome_source","fontWeight","fontSize","CHUNK_GENERATOR_TYPES","text","setText","isNaN","Dimension","onSave","state","setState","handleGeneratorChange","handleSubmit","fromEntries","FormData","onSubmit","NamespacedKey","example","onSelectLoad","dimension","JsonViewer","DimensionType"],"sourceRoot":""}